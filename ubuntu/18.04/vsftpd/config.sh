#!/bin/bash
#
# Download and run the latest release version.
# https://github.com/w3src/sh-amp
#
# Usage
# git clone https://github.com/w3src/sh-amp.git
# cd sh-amp
# chmod +x ./ubuntu/18.04/vsftpd/config.sh
# ./ubuntu/18.04/vsftpd/config.sh

# Work even if somebody does "sh thisscript.sh".
set -e

# Set a relative path.
FILENAME="$(basename $0)"
PKGPATH="$(dirname $0)"
PKGNAME="$(basename "${PKGPATH}")"
OSPATH="$(dirname "${PKGPATH}")"
LIBPATH="${PKGPATH}/lib"
TMPLPATH="${PKGPATH}/tmpl"

# Set absolute path.
ABSROOT="$(cd "$(dirname "")" && pwd)"
ABSENV="${ABSROOT}/env"
ABSOS="${ABSROOT}/${OSPATH}"
ABSPKG="${ABSOS}/${PKGNAME}"
ABSLIB="${ABSPKG}/lib"
ABSTMPL="${ABSPKG}/tmpl"
ABSPATH="${ABSPKG}/${FILENAME}"

# Include the file.
source "${ABSOS}/constants.sh"
source "${ABSOS}/utils.sh"
source "${ABSOS}/functions.sh"
source "${ABSPKG}/functions.sh"

# Make sure the package is installed.
pkgAudit "${PKGNAME}"

echo
echo "Start setting up ${PKGNAME} configuration."

# Set the arguments.
for arg in "${@}"; do
  case $arg in
  --my)
    IFS=$'\n'
    for i in $(find "${ABSPKG}/etc" -type f -name "[^_]*"); do
      cp "$i" "$(echo "$i" | sed "s/${ABSPKG//\//\\/}//")"
    done
    echo "${PKGNAME^} configuration is complete."
    exit 0
    ;;
  esac
done

# Import variables from the env file.
PUBLIC_IP="$(getPkgCnf -rs="\[HOSTS\]" -fs="=" -s="PUBLIC_IP")"

f_vsftpd="/etc/vsftpd.conf"

# Import non SSL/TLS variables from the template file.
setPkgCnf -f="${f_vsftpd}" -fs="=" -o="<<HERE
$(cat "${ABSTMPL}/vsftpd.conf")
<<HERE"

# Import variables from the env file.
VSFTPD_SSL="$(getPkgCnf -rs="\[VSFTPD\]" -fs="=" -s="VSFTPD_SSL")"

# Securing Transmissions with SSL/TLS
if [ "${VSFTPD_SSL^^}" == "YES" ]; then

  # Added dynamic variable in template file.
  if [ -z "$(cat "${f_vsftpd}" | grep 'This is a configuration dynamically generated by Amp Stack.')" ]; then
    cat >>"${f_vsftpd}" <<VSFTPDCONFSCRIPT
$(cat "${ABSTMPL}/dynamic-ssl.conf")
VSFTPDCONFSCRIPT
  else
    # Import dynamic variables from the template file.
    setPkgCnf -f="${f_vsftpd}" -fs="=" -o="<<HERE
  $(cat "${ABSTMPL}/dynamic-ssl.conf")
  <<HERE"
  fi

  # Added openssl license key.
  f_pem="/etc/ssl/private/vsftpd.pem"

  if [ -f "${f_pem}" ]; then
    echo "The ${f_pem} file already exists."
    CHANGE_MESSAGE="$(msg -ync "Do you want to change it? (y/n/c) ")"
    if [ "${CHANGE_MESSAGE}" == "Yes" ]; then
      openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout "${f_pem}" -out "${f_pem}"
      chmod 600 "${f_pem}"
    fi
  else
    openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout "${f_pem}" -out "${f_pem}"
    chmod 600 "${f_pem}"
  fi

  # SSL is enabled.
  setPkgCnf -f="${f_vsftpd}" -fs="=" -o="<<HERE
rsa_cert_file=${f_pem}
rsa_private_key_file=${f_pem}
ssl_enable=YES
<<HERE"

else

  # Added dynamic variable in template file.
  if [ -z "$(cat "${f_vsftpd}" | grep 'This is a configuration dynamically generated by Amp Stack.')" ]; then
    cat >>"${f_vsftpd}" <<VSFTPDCONFSCRIPT
$(cat "${ABSTMPL}/dynamic.conf")
VSFTPDCONFSCRIPT
  else
    # Import dynamic variables from the template file.
    setPkgCnf -f="${f_vsftpd}" -fs="=" -o="<<HERE
  $(cat "${ABSTMPL}/dynamic.conf")
  <<HERE"
  fi

  # SSL is disabled.
  setPkgCnf -f="${f_vsftpd}" -fs="=" -o="<<HERE
rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
ssl_enable=NO
<<HERE"

fi

# Import public ip address from the env file.
setPkgCnf -f="${f_vsftpd}" -fs="=" -o="<<HERE
pasv_address=${PUBLIC_IP}
<<HERE"

# Import variables from the env file.
VSFTPD_SHELL_ACCESS="$(getPkgCnf -rs="\[VSFTPD\]" -fs="=" -s="VSFTPD_SHELL_ACCESS")"

# Disabling Shell Access
if [ "${VSFTPD_SHELL_ACCESS^^}" != "YES" ]; then

  cat >/bin/ftponly <<FTPONLYSCRIPT
#!/bin/sh
echo "This account is limited to FTP access only."
FTPONLYSCRIPT

  chmod a+x /bin/ftponly

  if [ -z "$(cat "/etc/shells" | egrep "^\/bin\/ftponly$")" ]; then
    echo /bin/ftponly | sudo tee -a /etc/shells
  fi

fi

# Restarting the service.
systemctl restart vsftpd

echo
echo "${PKGNAME^} configuration is complete."
